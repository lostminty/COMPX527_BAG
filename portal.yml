- name: Setup the portal infrastructure
  hosts: localhost
  gather_facts: false

  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    AWS_DEFAULT_REGION: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
    AWS_REGION: "{{ lookup('env', 'AWS_REGION') }}"

  vars:
    # You can configure the below variables if you want more control over deployment.
    portal_instance: 't3.micro' # Should be compatible with the below.
    portal_tenancy: default # Can be set to 'dedicated' for extra security.
    portal_count_tags: ['0', '1', '2'] # Add any number of tags here. 3 instances by default.

    key: "{{ lookup('env', 'BAG_KEY_NAME') }}"
    ami: "ami-0210560cedcb09f07" # Amazon Linux 2.
    # vpc: "vpc-xxxxxx" # Don't think this is necessary to explicitly specify.
    portal_role_name: PortalServer
    portal_policy_name: PortalPolicy
    portal_ids: []
    zone_names: []

  tasks:
  - name: Create the main policy for the portal role
    iam_managed_policy:
      state: present
      policy_name: "{{ portal_policy_name }}"
      policy_description: "Main policy for a portal."
      policy: "{{ lookup('file', 'policies/portal.json') }}"

  - name: Create an IAM role to manage EC2 instances
    iam_role:
      name: "{{ portal_role_name }}"
      state: present
      description: "Perform the duty of the portal."
      purge_policies: true
      # Below is a list of all the services ("Principals") from Amazon/AWS that
      # can utilise the permissions of a role:
      # https://gist.github.com/shortjared/4c1e3fe52bdfa47522cfe5b41e5d6f22
      assume_role_policy_document: |-
        {
          "Version": "2012-10-17",
          "Statement":
          {
            "Effect": "Allow",
            "Principal": {"Service": "ec2.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        }
      managed_policies:
        - "{{ portal_policy_name }}"

  - name: Create a security group
    ec2_group:
      name: firewall
      # vpc_id: "{{ vpc }}"
      description: "Web portal firewall."
      rules:
        - proto: tcp
          ports: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports: 80
          cidr_ip: 0.0.0.0/0
        # - proto: tcp # See further below for a comment.
        #   ports: 443
        #   cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: firewall

  - name: Create the EC2 instances
    ec2_instance:
      state: present
      key_name: "{{ key }}"
      instance_type: "{{ portal_instance }}"
      instance_role: "{{ portal_role_name }}"
      cpu_credit_specification: unlimited
      tenancy: "{{ portal_tenancy }}" 
      image_id: "{{ ami }}"
      wait: yes
      wait_timeout: 50 # Just wait for "running", not full initialisation.
      detailed_monitoring: yes
      security_group: "{{ firewall.group_id }}"
      tags:
         Name: portal
         Count: "{{ item }}"
      filters:
        "tag:Name": portal
        "tag:Count": "{{ item }}"
        "instance-state-name": running
    loop: "{{ portal_count_tags }}"

  - name: Get a list of all the EC2 instances
    ec2_instance_info:
      filters:
        "tag:Name": portal
        "instance-state-name": running
        # "vpc-id": "{{ vpc }}"
    register: ec2

  - name: Add the portals to the in-memory inventory
    add_host:
      name: "{{ item.public_dns_name }}"
      groups: portals
    loop: "{{ ec2.instances }}"

  - name: Wait for SSH to come up on the portals
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      state: started
      sleep: 3
      timeout: 360
    with_items: "{{ ec2.instances }}"

  - name: Generate array of instance IDs
    set_fact:
      portal_ids: "{{ portal_ids }} + [ '{{ item.instance_id }}' ]"
    with_items: "{{ ec2.instances }}"

  - name: Get the availability zones for current region
    aws_az_info:
      filters:
        zone-type: availability-zone
    register: zones

  - name: Generate array of zones
    set_fact:
      zone_names: "{{ zone_names }} + [ '{{ item.zone_name }}' ]"
    with_items: "{{ zones.availability_zones }}"

  - name: Create the elastic load balancer
    ec2_elb_lb:
      name: BAG
      state: present
      security_group_ids:
        - "{{ firewall.group_id }}"
      instance_ids: "{{ portal_ids }}"
      zones: "{{ zone_names }}"
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
          proxy_protocol: true
      tags:
        Name: BAG

  - name: Create the "sessions" table (for PHP)
    dynamodb_table:
      state: present
      name: sessions
      hash_key_name: id
      hash_key_type: STRING
      read_capacity: 4
      write_capacity: 4

  - name: Create the "users" table
    dynamodb_table:
      state: present
      name: users
      hash_key_name: email
      hash_key_type: STRING
      read_capacity: 4
      write_capacity: 4

  - name: Wait for the "sessions" table to finish creating
    pause:
      seconds: 10

  - name: Set a TTL attribute ("sessions" table garbage collection)
    dynamodb_ttl:
      state: enable
      table_name: sessions
      attribute_name: expires

- name: Configure the portals
  hosts: portals
  remote_user: "ec2-user"
  gather_facts: false
  become: true

  vars:
    www_base_dir: /var/www/portal

  tasks:
    - name: Enable a PHP version higher than 5
      command: amazon-linux-extras enable php7.4
      changed_when: false

    - name: Installation of the server
      yum:
        state: present
        name:
          - php
          - php-common
          - php-mbstring
          - httpd
          # - mod_ssl # For certbot.
          # - augeas # For certbot.

    - name: Copy the configuration file for httpd (Apache2)
      copy:
        src: portal_src/httpd.conf
        dest: /etc/httpd/conf/httpd.conf
        owner: root
        group: root
        mode: '664'
        follow: true

    ## Certbot (LetsEncrypt) refuses to issue certificates for the public EC2
    ## DNS names. If we had a registered domain name for this host, then this
    ## would work. Leaving it here for reference in the report.
    # - name: Install certbot for the HTTPS certificate
    #   pip:
    #     name:
    #       - certbot
    #       - certbot-apache
    #     executable: pip3

    # - name: Install the certificates
    #   command: |-
    #     /usr/local/bin/certbot --noninteractive --agree-tos --register-unsafely-without-email --apache -d "{{ ansible_ssh_host }}"
    #   changed_when: false

    - name: Create the directory for the portal files
      file:
        path: "{{ www_base_dir }}"
        state: directory
        owner: root
        group: root
        mode: '755'

    - name: Create the config directory and the directory for AWS's PHP SDK
      file:
        state: directory
        path: "{{ www_base_dir }}/config/aws/"
        owner: apache
        group: apache
        mode: '760'

    - name: Install AWS's PHP SDK
      unarchive:
        src: portal_src/aws.zip
        dest: "{{ www_base_dir }}/config/aws/"
        owner: apache
        group: apache

    - name: Copy the configuration file for the portal
      copy:
        src: portal_src/config.php
        dest: "{{ www_base_dir }}/config/config.php"
        owner: apache
        group: apache
        mode: '440'

    - name: Copy the PHP file for the portal
      copy:
        src: portal_src/portal.php
        dest: "{{ www_base_dir }}/index.php"
        owner: apache
        group: apache
        mode: '440'

    - name: Copy the CSS file for the portal
      copy:
        src: portal_src/portal.css
        dest: "{{ www_base_dir }}/portal.css"
        owner: apache
        group: apache
        mode: '440'

    - name: Copy the PHP file for the submission API
      copy:
        src: portal_src/submit.php
        dest: "{{ www_base_dir }}/submit.php"
        owner: apache
        group: apache
        mode: '440'

    - name: Enable Apache2
      service:
        name: httpd
        enabled: yes

    - name: Upgrade all packages
      yum:
        name: '*'
        state: latest

    - name: Rebooting...
      reboot:
